#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/2.0/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/2.0/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    # daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-bind-options   no-sslv3 no-tls-tickets force-tlsv12
    ssl-default-bind-ciphers   ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

    spread-checks 4
    tune.maxrewrite 1024
    tune.ssl.default-dh-param 2048

resolvers docker-dns
  nameserver dns "${DNS_TCP_ADDR}:${DNS_TCP_PORT}"  
  resolve_retries       3
  timeout retry         1s
  hold other           30s
  hold refused         30s
  hold nx              30s
  hold timeout         30s
  hold valid           10s

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  dontlog-normal
    option                  redispatch
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    balance                 roundrobin
    retries                 3
    timeout http-request    10s
    timeout queue           30s
    timeout connect         10s
    timeout client          20s
    timeout server          20s
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
    # never fail on address resolution
    default-server          init-addr last,libc,none

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-in
    bind *:80

    option  forwardfor
    option  http-keep-alive

    stats enable
    stats refresh 30s
    # stats hide-version
    stats realm Strictly\ Private
    stats auth admin:haproxy
    stats uri /admin?stats

    http-request set-header X-Forwarded-For %[src]
    http-request add-header X-Forwarded-Host %[req.hdr(host)]
    http-request add-header X-Forwarded-Server %[req.hdr(host)]
    http-request add-header X-Forwarded-Port %[dst_port]

    # portainer
    # http://localhost/portainer
    acl is_portainer_end path_end /portainer
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/portainer,/portainer/,)] if is_portainer_end   
    acl is_portainer_beg path_beg /portainer/
    use_backend be_portainer if is_portainer_beg

    # pgweb
    # http://localhost/pgweb
    acl is_pgweb_end path_end /pgweb
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/pgweb,/pgweb/,)] if is_pgweb_end   
    acl is_pgweb_beg path_beg /pgweb/
    use_backend be_pgweb if is_pgweb_beg

    # pgadmin4
    # http://localhost/pgadmin4
    acl is_pgadmin4_end path_end /pgadmin4
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/pgadmin4,/pgadmin4/,)] if is_pgadmin4_end   
    acl is_pgadmin4_beg path_beg /pgadmin4/
    use_backend be_pgadmin4 if is_pgadmin4_beg

    # webui app
    # http://localhost/app
    acl is_webui_app_end path_end /app
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/app,/app/,)] if is_webui_app_end   
    acl is_webui_app_beg path_beg /app/
    use_backend be_webui if is_webui_app_beg

    # Eclipse Equinox - Felix
    # http://localhost/osgi/system/console
    acl is_felix_sysconsole_end path_end /osgi/system/console
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/osgi/system/console,/osgi/system/console/,)] if is_felix_sysconsole_end   
    acl is_felix_sysconsole_beg path_beg /osgi/system/console/
    use_backend be_webui if is_felix_sysconsole_beg    

    # Apache Karaf - Felix
    # http://localhost/system/console
    acl is_karaf_sysconsole_end path_end /system/console
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/system/console,/system/console/,)] if is_karaf_sysconsole_end   
    acl is_karaf_sysconsole_beg path_beg /system/console/
    use_backend be_webui if is_karaf_sysconsole_beg    

    # Apache Karaf - hawtio
    # http://localhost/hawtio
    # http://localhost/hawtio/
    acl is_webui_hawtio_end path_end /hawtio
    http-request redirect code 301 location http://%[hdr(host)]%[url,regsub(^/hawtio,/hawtio/,)] if is_webui_hawtio_end   
    acl is_webui_hawtio_beg path_beg /hawtio/
    use_backend be_webui if is_webui_hawtio_beg        

    # default backend
    default_backend be_webui

# frontend https-in
#     mode tcp
#     # mode http
#     bind *:443 ssl crt /etc/ssl/dummy.pem alpn h2,http/1.1
#     http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
#     use_backend be_webui if { ssl_fc_alpn -i h2 }
#     default_backend be_webui
    
backend be_portainer
    mode http
    option  forwardfor
    option  http-keep-alive

    # reqrep ^([^\ :]*\ /)portainer[/]?(.*)     \1\2
    http-request set-path %[path,regsub(^/portainer/?,/)]
    server kbs-portainer kbs-portainer:9000 check init-addr last,libc,none resolvers docker-dns resolve-prefer ipv4

backend be_pgweb
    mode http    
    option  forwardfor
    option  http-keep-alive    

    server kbs-pgweb kbs-pgweb:8080 check init-addr last,libc,none resolvers docker-dns resolve-prefer ipv4

# not working @TODO
backend be_pgadmin4
    mode http    
    option  forwardfor
    option  http-keep-alive    
    # http-request set-path %[path,regsub(^/pgadmin4/?,/)]
    reqrep ^([^\ :]*\ /)pgadmin4[/]?(.*)     \1\2
    server kbs-pgadmin4 kbs-pgadmin4:80 check init-addr last,libc,none resolvers docker-dns resolve-prefer ipv4

backend be_webui
    mode http
    option  forwardfor
    option  http-keep-alive

    server kbs-server kbs-server:8080 check init-addr last,libc,none resolvers docker-dns resolve-prefer ipv4
