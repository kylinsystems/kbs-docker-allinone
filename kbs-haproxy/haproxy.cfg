#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/2.0/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/2.0/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    # daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-bind-options   no-sslv3 no-tls-tickets force-tlsv12
    ssl-default-bind-ciphers   ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

    spread-checks 4
    tune.maxrewrite 1024
    tune.ssl.default-dh-param 2048


#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  dontlog-normal
    option                  redispatch
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    balance                 roundrobin
    retries                 3
    timeout http-request    10s
    timeout queue           30s
    timeout connect         10s
    timeout client          20s
    timeout server          20s
    timeout http-keep-alive 15s
    timeout check           10s
    maxconn                 3000

    # never fail on address resolution
    default-server init-addr none

resolvers docker-dns
  nameserver dns 127.0.0.11:53
  resolve_retries       3
  timeout retry         1s
  hold other           30s
  hold refused         30s
  hold nx              30s
  hold timeout         30s
  hold valid           10s


#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------

# frontend https-in
#     mode tcp
#     bind *:443 ssl crt /etc/ssl/dummy.pem alpn h2,http/1.1
#     http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
    
#     use_backend be_app if { ssl_fc_alpn -i h2 }
#     default_backend be_app

frontend http-in
    bind *:80

    option  forwardfor
    option  http-keep-alive

    stats enable
    stats refresh 30s
    # stats hide-version
    stats realm Strictly\ Private
    stats auth admin:haproxy
    stats uri /admin?stats

    # http-request set-header X-Forwarded-For %[src]
    # http-request add-header X-Forwarded-Host %[req.hdr(host)]
    # http-request add-header X-Forwarded-Server %[req.hdr(host)]
    # http-request add-header X-Forwarded-Port %[dst_port]

    # portainer
    # http://localhost/portainer
    use_backend be_portainer if { path /portainer } or { path_beg /portainer/ }

    # grafana
    # http://localhost/grafana
    use_backend be_grafana if { path /grafana } or { path_beg /grafana/ }

    # pgweb
    # http://localhost/pgweb
    use_backend be_pgweb if { path /pgweb } or { path_beg /pgweb/ }

    # pgadmin4
    # http://localhost/pgadmin4
    use_backend be_pgadmin4 if { path /pgadmin4 } or { path_beg /pgadmin4/ }

    # pgwatch dashboard
    # http://localhost/pgwatch
    use_backend be_pgwatch if { path /pgwatch } or { path_beg /pgwatch/ }

    # pgwatch admin
    # http://localhost/pgwatchadmin
    use_backend be_pgwatchadmin if { path /pgwatchadmin } or { path_beg /pgwatchadmin/ }

    # kbs app
    # http://localhost/app
    use_backend be_app if { path /app } or { path_beg /app/ }

    # Felix in Eclipse Equinox
    # http://localhost/osgi/system/console
    use_backend be_app if { path /osgi/system/console } or { path_beg /osgi/system/console/ }

    # Felix in Apache Karaf
    # http://localhost/system/console
    use_backend be_app if { path /system/console } or { path_beg /system/console/ }

    # Hawtio in Apache Karaf
    # http://localhost/hawtio
    use_backend be_app if { path /hawtio } or { path_beg /hawtio/ }

    # default backend
    default_backend be_app

#---------------------------------------------------------------------
# main backends
#---------------------------------------------------------------------
backend be_portainer
    mode http
    option  forwardfor
    option  http-keep-alive

    # reqrep ^([^\ :]*\ /)portainer[/]?(.*)     \1\2
    http-request set-path %[path,regsub(^/portainer/?,/)]
    server kbs-portainer kbs-portainer:9000 check resolvers docker-dns resolve-prefer ipv4

backend be_grafana
    mode http    
    option  forwardfor
    option  http-keep-alive

    server kbs-grafana kbs-grafana:3000 check resolvers docker-dns resolve-prefer ipv4

backend be_pgweb
    mode http    
    option  forwardfor
    option  http-keep-alive

    server kbs-pgweb kbs-pgweb:8080 check resolvers docker-dns resolve-prefer ipv4

backend be_pgwatch
    mode http    
    option  forwardfor
    option  http-keep-alive

    server kbs-pgwatch kbs-pgwatch:3000 check resolvers docker-dns resolve-prefer ipv4

# not working @TODO
backend be_pgwatchadmin
    mode http    
    option  forwardfor
    option  http-keep-alive

    http-request set-path %[path,regsub(^/pgwatchadmin/?,/)]
    server kbs-pgwatchadmin kbs-pgwatch:8080 check resolvers docker-dns resolve-prefer ipv4

# not working @TODO
backend be_pgadmin4
    mode http    
    option  forwardfor
    option  http-keep-alive

    # reqrep ^([^\ ]*\ /)pgadmin4[/]?(.*)  \1\2
    http-request set-path %[path,regsub(^/pgadmin4/?,/)]
    server kbs-pgadmin4 kbs-pgadmin4:80 check resolvers docker-dns resolve-prefer ipv4

backend be_app
    mode http
    option  forwardfor
    option  http-keep-alive

    server kbs-server kbs-server:8080 check resolvers docker-dns resolve-prefer ipv4
