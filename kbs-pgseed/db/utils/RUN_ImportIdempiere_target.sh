#!/bin/sh
#

if [ $IDEMPIERE_HOME ]; then
  cd $IDEMPIERE_HOME/utils
fi
. ./myEnvironment.sh
echo Import iDempiere - $IDEMPIERE_HOME \($TARGET_DB_NAME\)


echo == Start import seed database to target instance ==

echo Re-Create idempiere User and import $IDEMPIERE_HOME/data/seed/${DB_DUMP_FILE} - \($TARGET_DB_NAME\)
echo == The import will show warnings. This is OK ==
cd $IDEMPIERE_HOME/data/seed
cd ..
cd $IDEMPIERE_HOME/utils
ls -lsa $IDEMPIERE_HOME/data/seed/${DB_DUMP_FILE}

echo	Importing idempiere DB from $IDEMPIERE_HOME/data/seed/${DB_DUMP_FILE}

PGPASSWORD=$DB_SYSTEM
export PGPASSWORD

echo -------------------------------------
echo Recreate user and database
echo -------------------------------------

echo "drop db $TARGET_DB_NAME"
dropdb -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -U $DB_SYSTEM $TARGET_DB_NAME
echo "drop user $TARGET_DB_USER"
dropuser -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -U $DB_SYSTEM $TARGET_DB_USER

echo "create role $TARGET_DB_USER"
CREATE_ROLE_SQL="CREATE ROLE $TARGET_DB_USER SUPERUSER LOGIN PASSWORD '$TARGET_DB_PASSWORD'"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -U $DB_SYSTEM -c "$CREATE_ROLE_SQL"
CREATE_ROLE_SQL=

PGPASSWORD=$TARGET_DB_PASSWORD
export PGPASSWORD

echo "create db $TARGET_DB_NAME"
createdb  --template=template0 -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -E UNICODE -O $TARGET_DB_USER -U $TARGET_DB_USER $TARGET_DB_NAME

ALTER_ROLE_SQL="ALTER ROLE $TARGET_DB_USER IN DATABASE $TARGET_DB_NAME SET search_path TO $DB_SCHEMA, pg_catalog"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -f $IDEMPIERE_HOME/data/seed/${DB_DUMP_FILE}
ALTER_ROLE_SQL=

echo "create role Read_Only_User : $TARGET_DB_USER_RO"  
CREATE_ROLE_SQL="CREATE ROLE $TARGET_DB_USER_RO WITH LOGIN PASSWORD '$TARGET_DB_PASSWORD_RO' NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION VALID UNTIL 'infinity'"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$CREATE_ROLE_SQL"
CREATE_ROLE_SQL=

echo "Assign permission to this Read_Only_User : $TARGET_DB_USER_RO"  
ALTER_ROLE_SQL="GRANT CONNECT ON DATABASE $TARGET_DB_NAME TO $TARGET_DB_USER_RO"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL="ALTER ROLE $TARGET_DB_USER_RO IN DATABASE $TARGET_DB_NAME SET search_path TO $DB_SCHEMA, pg_catalog"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL="GRANT USAGE ON SCHEMA $DB_SCHEMA TO $TARGET_DB_USER_RO"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL="GRANT SELECT ON ALL TABLES IN SCHEMA $DB_SCHEMA TO $TARGET_DB_USER_RO"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL="GRANT SELECT ON ALL SEQUENCES IN SCHEMA $DB_SCHEMA TO $TARGET_DB_USER_RO"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL="ALTER DEFAULT PRIVILEGES IN SCHEMA $DB_SCHEMA GRANT SELECT ON TABLES TO $TARGET_DB_USER_RO"
psql -h $TARGET_DB_SERVER -p $TARGET_DB_PORT -d $TARGET_DB_NAME -U $TARGET_DB_USER -c "$ALTER_ROLE_SQL"
ALTER_ROLE_SQL=

#Reset PGPASSWORD
PGPASSWORD=
export PGPASSWORD

echo == End of inital target instance. ==

